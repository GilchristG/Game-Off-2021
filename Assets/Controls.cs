//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Fight"",
            ""id"": ""4af7701f-a188-4499-afb0-e8434800d554"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""79897eb6-e538-4b2e-8f95-f0f91011790b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""9298d6c8-64d9-4bb8-b8f7-a83cbd135f03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MidAttack"",
                    ""type"": ""Button"",
                    ""id"": ""f9bc94fd-d8c1-4ca3-ac6f-0f4a8217f761"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""e812d90d-5538-4b55-82a5-7303853182dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""02b0d3a2-63d3-416b-8339-61fb71f63d1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""267f4d31-dcb8-4e56-a308-7f9e75c64059"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7718b76e-6f54-4531-83eb-b3db0e67b50c"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb69fc0b-7720-46d9-bc99-b28bcdb52239"",
                    ""path"": ""<DualShockGamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a516307-56f3-4c18-a63a-398efe2dad46"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b88c1dc-1fa0-45a6-8d9e-0a263e96ed4b"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""MidAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a668adcd-c9d9-4f61-9132-8d14c74d3533"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1233dd01-77a1-46e8-8f80-465783709677"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""882721bb-cf0a-4893-85ca-f733a6818f20"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b58c1dcd-94dc-4adf-a929-5c94fa2c8dcf"",
                    ""path"": ""<DualShockGamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a36c8e28-08a9-41bd-8926-77c35295d04e"",
                    ""path"": ""<DualShockGamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8335e62f-31e9-49f7-8c4c-bdd54d46f53f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""68e099e1-0e0c-4d7e-ad3f-2084b7763aa2"",
                    ""path"": ""<DualShockGamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""375aa5fe-7088-4680-a062-81f78b900232"",
                    ""path"": ""<DualShockGamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS4"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PS4"",
            ""bindingGroup"": ""PS4"",
            ""devices"": []
        }
    ]
}");
        // Fight
        m_Fight = asset.FindActionMap("Fight", throwIfNotFound: true);
        m_Fight_Walk = m_Fight.FindAction("Walk", throwIfNotFound: true);
        m_Fight_LightAttack = m_Fight.FindAction("LightAttack", throwIfNotFound: true);
        m_Fight_MidAttack = m_Fight.FindAction("MidAttack", throwIfNotFound: true);
        m_Fight_HeavyAttack = m_Fight.FindAction("HeavyAttack", throwIfNotFound: true);
        m_Fight_Special = m_Fight.FindAction("Special", throwIfNotFound: true);
        m_Fight_Dash = m_Fight.FindAction("Dash", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Fight
    private readonly InputActionMap m_Fight;
    private IFightActions m_FightActionsCallbackInterface;
    private readonly InputAction m_Fight_Walk;
    private readonly InputAction m_Fight_LightAttack;
    private readonly InputAction m_Fight_MidAttack;
    private readonly InputAction m_Fight_HeavyAttack;
    private readonly InputAction m_Fight_Special;
    private readonly InputAction m_Fight_Dash;
    public struct FightActions
    {
        private @Controls m_Wrapper;
        public FightActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Fight_Walk;
        public InputAction @LightAttack => m_Wrapper.m_Fight_LightAttack;
        public InputAction @MidAttack => m_Wrapper.m_Fight_MidAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_Fight_HeavyAttack;
        public InputAction @Special => m_Wrapper.m_Fight_Special;
        public InputAction @Dash => m_Wrapper.m_Fight_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Fight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FightActions set) { return set.Get(); }
        public void SetCallbacks(IFightActions instance)
        {
            if (m_Wrapper.m_FightActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_FightActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_FightActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_FightActionsCallbackInterface.OnWalk;
                @LightAttack.started -= m_Wrapper.m_FightActionsCallbackInterface.OnLightAttack;
                @LightAttack.performed -= m_Wrapper.m_FightActionsCallbackInterface.OnLightAttack;
                @LightAttack.canceled -= m_Wrapper.m_FightActionsCallbackInterface.OnLightAttack;
                @MidAttack.started -= m_Wrapper.m_FightActionsCallbackInterface.OnMidAttack;
                @MidAttack.performed -= m_Wrapper.m_FightActionsCallbackInterface.OnMidAttack;
                @MidAttack.canceled -= m_Wrapper.m_FightActionsCallbackInterface.OnMidAttack;
                @HeavyAttack.started -= m_Wrapper.m_FightActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.performed -= m_Wrapper.m_FightActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.canceled -= m_Wrapper.m_FightActionsCallbackInterface.OnHeavyAttack;
                @Special.started -= m_Wrapper.m_FightActionsCallbackInterface.OnSpecial;
                @Special.performed -= m_Wrapper.m_FightActionsCallbackInterface.OnSpecial;
                @Special.canceled -= m_Wrapper.m_FightActionsCallbackInterface.OnSpecial;
                @Dash.started -= m_Wrapper.m_FightActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_FightActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_FightActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_FightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @LightAttack.started += instance.OnLightAttack;
                @LightAttack.performed += instance.OnLightAttack;
                @LightAttack.canceled += instance.OnLightAttack;
                @MidAttack.started += instance.OnMidAttack;
                @MidAttack.performed += instance.OnMidAttack;
                @MidAttack.canceled += instance.OnMidAttack;
                @HeavyAttack.started += instance.OnHeavyAttack;
                @HeavyAttack.performed += instance.OnHeavyAttack;
                @HeavyAttack.canceled += instance.OnHeavyAttack;
                @Special.started += instance.OnSpecial;
                @Special.performed += instance.OnSpecial;
                @Special.canceled += instance.OnSpecial;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public FightActions @Fight => new FightActions(this);
    private int m_PS4SchemeIndex = -1;
    public InputControlScheme PS4Scheme
    {
        get
        {
            if (m_PS4SchemeIndex == -1) m_PS4SchemeIndex = asset.FindControlSchemeIndex("PS4");
            return asset.controlSchemes[m_PS4SchemeIndex];
        }
    }
    public interface IFightActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnMidAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
}
